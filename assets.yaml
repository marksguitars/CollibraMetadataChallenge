openapi: 3.0.3
info:
  title: Collibra Asset Manager- OpenAPI 3.0
  description: |-
    This is a sample Asset Management Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). Callibra prefers the API first approach for this iteration of REStful API documentation concerning the Asset Management Application!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://assetmanager.swagger.io/api/v3
tags:
  - name: asset
    description: Everything about your Assets
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /api/v1/assets{assetId}:
    put:
      tags:
        - asset
      summary: Update an existing asset
      description: Update an existing asset by Id
      operationId: assetId
      parameters:
        - in: path
          name: assetId
          schema:
            type: string
          description: ID of asset to return
          required: true
      requestBody:
        description: Update an existent asset in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
          application/xml:
            schema:
              $ref: '#/components/schemas/Asset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Invalid ID supplied
        '404':
          description: Asset not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - asset
      summary: Find asset by ID
      description: Returns a single asset
      operationId: findAssetById
      parameters:
        - name: assetId
          in: path
          description: ID of asset to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Invalid ID supplied
        '404':
          description: Asset not found
      security:
        - api_key: []
        - petstore_auth:
            - write:assets
            - read:assets
    delete:
      tags:
        - asset
      summary: Deletes an asset
      description: delete a asset
      operationId: deleteAssetById
      parameters:
        - name: assetId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /api/v1/assets:            
    post:
      tags:
        - assets
      summary: Add a new Asset 
      description: Add a new Asset to the metadata system
      operationId: addAsset
      requestBody:
        description: Create a new Asset in the metadata system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
          application/xml:
            schema:
              $ref: '#/components/schemas/Asset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Asset'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:assets
            - read:assets
  
components:
  schemas:
    Asset:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: myAsset
        assetType:
          type: string
          description: Type of asset
          example: CASH
          enum:
            - CASH
            - RECEIVABLES
            - INVESTMENTS
            - PROPERTY
            - INVENTORY
            - PPE
            - VEHICLE
        parentAsset:
          type: object
          description: Parent asset object
          example: new Asset("myNewAsset", CASH, myParentAsset, {myChildAsset1, myChildAsset2}, true, "03/11/2023 17:30:25")
        childAssets:
          type: array
          items: 
            $ref: '#/components/schemas/childAsset'
        promoted:
          type: boolean
          description: Flag which states whether Asset has been promoted
          example: true
        created:
          type: string
          description: Specifies when Asset was originally created
    childAsset:
      type: object
          
          
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header